package ch.vaudoise.vaudoiseapi.exercice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientInfoAllPropertiesEquals(ClientInfo expected, ClientInfo actual) {
        assertClientInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertClientInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientInfoAllUpdatablePropertiesEquals(ClientInfo expected, ClientInfo actual) {
        assertClientInfoUpdatableFieldsEquals(expected, actual);
        assertClientInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientInfoAutoGeneratedPropertiesEquals(ClientInfo expected, ClientInfo actual) {
        assertThat(actual)
            .as("Verify ClientInfo auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientInfoUpdatableFieldsEquals(ClientInfo expected, ClientInfo actual) {
        assertThat(actual)
            .as("Verify ClientInfo relevant properties")
            .satisfies(a -> assertThat(a.getCreationDate()).as("check creationDate").isEqualTo(expected.getCreationDate()))
            .satisfies(a -> assertThat(a.getUpdateDate()).as("check updateDate").isEqualTo(expected.getUpdateDate()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientInfoUpdatableRelationshipsEquals(ClientInfo expected, ClientInfo actual) {
        // empty method
    }
}
